MaterialDef Simple {
    MaterialParameters {
        Boolean UseInstancing
        Int NumShadows
        Matrix4Array LightViewProjectionMatrix
        Vector4 Splits
        Vector2 FadeInfo
        Texture2D ShadowMap0
        Texture2D ShadowMap1
        Texture2D ShadowMap2
        Texture2D ShadowMap3
        Texture2D ShadowMap4
        Texture2D ShadowMap5
        Vector3 LightPos
        Int ShadowLight
        Vector3 LightDir
        Float ShadowMapSize
        Boolean HardwareShadows
        Int FilterMode
        Int ShadowCount
        Float PCFEdge
        Int NumberOfShadows
        Texture2D NormalMap -LINEAR
        Texture2D DiffuseMap
    }
    Technique {
        LightMode SinglePass
        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            WorldMatrix
            NormalMatrix
            ViewMatrix
            ViewProjectionMatrix
        }
        Defines {
            HARDWARE_SHADOWS : HardwareShadows
            FILTER_MODE : FilterMode
            PCFEDGE : PCFEdge
            SHADOWMAP_SIZE : ShadowMapSize
            SHADOWCOUNT : ShadowCount
        }
        VertexShaderNodes {
            ShaderNode AttributeToVarying {
                Definition : AttributeToVarying : Common/MatDefs/ShaderNodes/Basic/AttributeToVarying.j3sn
                InputMappings {
                    vec2Variable = Attr.inTexCoord
                }
            }
            ShaderNode VertexTransforms {
                Definition : VertexTransforms : Common/MatDefs/ShaderNodes/Basic/VertexTransforms.j3sn
                OutputMappings {
                    Global.position = worldViewProjectionPosition
                }
                InputMappings {
                    viewMatrix = WorldParam.ViewMatrix : UseInstancing
                    viewProjectionMatrix = WorldParam.ViewProjectionMatrix : UseInstancing
                    worldMatrix = WorldParam.WorldMatrix : !UseInstancing
                    worldViewMatrix = WorldParam.WorldViewMatrix : !UseInstancing
                    worldViewProjectionMatrix = WorldParam.WorldViewProjectionMatrix : !UseInstancing
                    normalMatrix = WorldParam.NormalMatrix
                    modelPosition = Attr.inPosition.xyz
                    inNormal = Attr.inNormal
                    inTangent = Attr.inTangent : NormalMap
                    inInstanceData = Attr.inInstanceData : UseInstancing
                }
            }
            ShaderNode ShadowPreFrameVertex {
                Definition : ShadowPreFrameVertex : Common/MatDefs/ShaderNodes/Shadow/ShadowPreFrame.j3sn
                Condition : NumberOfShadows
                InputMappings {
                    worldPos = VertexTransforms.worldPosition
                    LightViewProjectionMatrix = MatParam.LightViewProjectionMatrix
                    LightPos = MatParam.LightPos
                    LightDir = MatParam.LightDir
                }
            }
        }
        FragmentShaderNodes {
            ShaderNode TextureFetch {
                Definition : TextureFetch : Common/MatDefs/ShaderNodes/Basic/TextureFetch.j3sn
                InputMappings {
                    textureMap = MatParam.NormalMap
                    texCoord = AttributeToVarying.vec2Variable
                }
            }
            ShaderNode NormalMapping {
                Definition : NormalMapping : Common/MatDefs/ShaderNodes/Lighting/NormalMapping.j3sn
                Condition : NormalMap
                InputMappings {
                    viewNormal = VertexTransforms.normal
                    viewPos = VertexTransforms.worldViewPosition.xyz
                    vTangent = VertexTransforms.tangent
                    vBinormal = VertexTransforms.binormal
                    inNormalMap = TextureFetch.outColor.xyz
                }
            }
            ShaderNode ShadowPreFrameFragment {
                Definition : ShadowPreFrameFragment : Common/MatDefs/ShaderNodes/Shadow/ShadowPreFrame.j3sn
                Condition : NumberOfShadows
                InputMappings {
                    ShadowMap4 = MatParam.ShadowMap4
                    ShadowMap0 = MatParam.ShadowMap0
                    ShadowMap1 = MatParam.ShadowMap1
                    ShadowMap2 = MatParam.ShadowMap2
                    ShadowMap3 = MatParam.ShadowMap3
                    ShadowMap5 = MatParam.ShadowMap5
                    worldPos = VertexTransforms.worldPosition : NumberOfShadows ||  !NumberOfShadows
                    inLightDot = ShadowPreFrameVertex.outLightDot
                    LightPos = MatParam.LightPos
                    shadowPosition = VertexTransforms.worldViewProjectionPosition.z : NumberOfShadows ||  !NumberOfShadows
                    Splits = MatParam.Splits
                    FadeInfo = MatParam.FadeInfo
                }
            }
            ShaderNode TextureFetch1 {
                Definition : TextureFetch : Common/MatDefs/ShaderNodes/Basic/TextureFetch.j3sn
                Condition : DiffuseMap
                InputMappings {
                    texCoord = AttributeToVarying.vec2Variable
                    textureMap = MatParam.DiffuseMap
                }
            }
            ShaderNode SinglePassLighting {
                Definition : SinglePassLighting : Common/MatDefs/ShaderNodes/Lighting/SinglePassLighting.j3sn
                OutputMappings {
                    Global.color = singlePassOut
                }
                InputMappings {
                    viewNormal = NormalMapping.outNormal : NormalMap
                    viewNormal = VertexTransforms.normal : !NormalMap
                    inTbnMat = NormalMapping.tbnMat : NormalMap
                    inViewDir = NormalMapping.viewDir : NormalMap
                    inViewPos = VertexTransforms.worldViewPosition
                    shadow = ShadowPreFrameFragment.shadowIntensity : NumberOfShadows
                    ShadowLight = MatParam.ShadowLight : NumberOfShadows
                    diffuse = TextureFetch1.outColor.xyz : DiffuseMap
                }
            }
        }
    }
    Technique PreShadow {
        VertexShader GLSL110: Common/MatDefs/Shadow/PreShadow.vert
        FragmentShader GLSL110: Common/MatDefs/Shadow/PreShadow.frag
        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            ViewMatrix
            ViewProjectionMatrix
        }
        Defines {
            INSTANCING : UseInstancing
        }

        RenderState {
            FaceCull Off
            DepthTest On
            DepthWrite On
            PolyOffset 5 3
            ColorWrite Off
        }
    }
    Technique PostShadow {
        VertexShader GLSL150: Common/MatDefs/Shadow/PostShadow15.vert
        FragmentShader GLSL150: Common/MatDefs/Shadow/PostShadow15.frag
        WorldParameters {
            WorldViewProjectionMatrix
            WorldMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            HARDWARE_SHADOWS : HardwareShadows
            FILTER_MODE : FilterMode
            PCFEDGE : PCFEdge
            DISCARD_ALPHA : AlphaDiscardThreshold           
            COLOR_MAP : ColorMap
            SHADOWMAP_SIZE : ShadowMapSize
            FADE : FadeInfo
            PSSM : Splits
            POINTLIGHT : LightViewProjectionMatrix5
            NUM_BONES : NumberOfBones
            INSTANCING : UseInstancing
        }

        ForcedRenderState {
            Blend Modulate
            DepthWrite Off   
            PolyOffset -0.1 0  
        }
    }
}