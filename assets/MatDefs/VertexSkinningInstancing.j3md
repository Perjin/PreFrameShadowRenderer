MaterialDef Simple {
    MaterialParameters {
        Boolean UseInstancing
        Texture2D NormalMap
    }
    Technique {
        LightMode SinglePass
        WorldParameters {
            WorldMatrix
            WorldViewMatrix
            WorldViewProjectionMatrix
            NormalMatrix
            ViewMatrix
            ViewProjectionMatrix
        }
        Defines {
          INSTANCING : UseInstancing
          NORMALMAP : NormalMap
        }
        VertexShaderNodes {
            ShaderNode VertexSkinningInstancing {
                Definition : VertexSkinningInstancing : Common/MatDefs/ShaderNodes/Basic/VertexSkinningInstancing.j3sn
                InputMappings {
                    inPosition = Attr.inPosition.xyz
                    inNormal = Attr.inNormal
                    WorldMatrix = WorldParam.WorldMatrix
                    WorldViewMatrix = WorldParam.WorldViewMatrix
                    ViewMatrix = WorldParam.ViewMatrix
                    WorldViewProjectionMatrix = WorldParam.WorldViewProjectionMatrix
                    NormalMatrix = WorldParam.NormalMatrix
                    inTexCoord = Attr.inTexCoord
                    ViewProjectionMatrix = WorldParam.ViewProjectionMatrix
                    inInstanceData = Attr.inInstanceData
                    inTangent = Attr.inTangent
                }
                OutputMappings {
                    Global.position = worldViewProjectionPosition
                }
            }
        }
        FragmentShaderNodes {
            ShaderNode NormalMapping {
                Definition : NormalMapping : Common/MatDefs/ShaderNodes/Lighting/NormalMapping.j3sn
                InputMappings {
                    viewNormal = VertexSkinningInstancing.vNormal
                    viewPos = VertexSkinningInstancing.vPos
                    texCoord = VertexSkinningInstancing.texCoord
                    NormalMap = MatParam.NormalMap
                    vTangent = VertexSkinningInstancing.vTangent
                    vBinormal = VertexSkinningInstancing.vBinormal
                }
            }
            ShaderNode SinglePassLighting {
                Definition : SinglePassLighting : Common/MatDefs/ShaderNodes/Lighting/SinglePassLighting.j3sn
                InputMappings {
                    viewNormal = NormalMapping.outNormal
                    inTbnMat = NormalMapping.tbnMat
                    inViewDir = NormalMapping.viewDir
                    inViewPos = VertexSkinningInstancing.vPos
                }
                OutputMappings {
                    Global.color = singlePassOut
                }
            }
        }
    }
}